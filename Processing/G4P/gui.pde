/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void button1_click1(GButton source, GEvent event) { //_CODE_:btn:611611:
  println("button1 - GButton >> GEvent." + event + " @ " + millis());
  col = color(random(0, 360), 255, 255);
} //_CODE_:btn:611611:

public void stick1_change1(GStick source, GEvent event) { //_CODE_:stick1:809110:
  println("stick1 - GStick >> GEvent." + event + " @ " + millis());
} //_CODE_:stick1:809110:

public void knob1_turn1(GKnob source, GEvent event) { //_CODE_:knob1:585948:
  println("knob1 - GKnob >> GEvent." + event + " @ " + millis());
} //_CODE_:knob1:585948:

public void dropList1_click1(GDropList source, GEvent event) { //_CODE_:dropList1:675290:
  println("dropList1 - GDropList >> GEvent." + event + " @ " + millis());
} //_CODE_:dropList1:675290:

public void slider2d1_change1(GSlider2D source, GEvent event) { //_CODE_:slider2d1:655388:
  println("slider2d1 - GSlider2D >> GEvent." + event + " @ " + millis());
} //_CODE_:slider2d1:655388:

public void slider1_change1(GSlider source, GEvent event) { //_CODE_:slider1:740097:
  println("slider1 - GSlider >> GEvent." + event + " @ " + millis());
  D = source.getValueI();
} //_CODE_:slider1:740097:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  btn = new GButton(this, 20, 20, 80, 30);
  btn.setText("START");
  btn.setLocalColorScheme(GCScheme.RED_SCHEME);
  btn.addEventHandler(this, "button1_click1");
  stick1 = new GStick(this, 140, 30, 60, 60);
  stick1.setMode(G4P.X4);
  stick1.setOpaque(false);
  stick1.addEventHandler(this, "stick1_change1");
  knob1 = new GKnob(this, 190, 110, 60, 60, 0.8);
  knob1.setTurnRange(110, 70);
  knob1.setTurnMode(GKnob.CTRL_HORIZONTAL);
  knob1.setSensitivity(1);
  knob1.setShowArcOnly(false);
  knob1.setOverArcOnly(false);
  knob1.setIncludeOverBezel(false);
  knob1.setShowTrack(true);
  knob1.setLimits(0.5, 0.0, 1.0);
  knob1.setShowTicks(true);
  knob1.setOpaque(false);
  knob1.addEventHandler(this, "knob1_turn1");
  dropList1 = new GDropList(this, 230, 30, 90, 120, 3, 10);
  dropList1.setItems(loadStrings("list_675290"), 0);
  dropList1.addEventHandler(this, "dropList1_click1");
  label1 = new GLabel(this, 20, 70, 80, 20);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("My label");
  label1.setOpaque(false);
  slider2d1 = new GSlider2D(this, 20, 110, 50, 50);
  slider2d1.setLimitsX(0.5, 0.0, 1.0);
  slider2d1.setLimitsY(0.5, 0.0, 1.0);
  slider2d1.setNumberFormat(G4P.DECIMAL, 2);
  slider2d1.setOpaque(true);
  slider2d1.addEventHandler(this, "slider2d1_change1");
  slider1 = new GSlider(this, 10, 210, 190, 90, 10.0);
  slider1.setShowValue(true);
  slider1.setShowLimits(true);
  slider1.setLimits(10.0, 10.0, 200.0);
  slider1.setStickToTicks(true);
  slider1.setShowTicks(true);
  slider1.setNumberFormat(G4P.DECIMAL, 2);
  slider1.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  slider1.setOpaque(true);
  slider1.addEventHandler(this, "slider1_change1");
}

// Variable declarations 
// autogenerated do not edit
GButton btn; 
GStick stick1; 
GKnob knob1; 
GDropList dropList1; 
GLabel label1; 
GSlider2D slider2d1; 
GSlider slider1; 
